<?xml version="1.0" ?>
<project name="WaterCraft" default="build">
	<property file="build.properties" prefix="build" />
	<property file="environment.properties" prefix="environment" />

	<available file="${environment.repo_location}/.git" type="dir" property="git.present" />

	<!-- gets the sha suffix to use and stores it in ${repository.shaString} -->
	<target name="get_sha_string" depends="tmp.repository.sha, git.status">
		<condition property="repository.shaString" value="${tmp.repository.sha}-modified" else="${tmp.repository.sha}">
			<and>
				<isset property="repository.modified" />
				<not>
					<equals trim="yes" arg1="${tmp.repository.sha}" arg2="noSHA" />
				</not>
			</and>
		</condition>

		<antcall target="no_git_warning" />
		<antcall target="dirty_tree_warning" />
		<echo message="Resolved SHA String: ${repository.shaString}" />
	</target>
	
	<!-- helper for get_sha_string -->
	<target name="tmp.repository.sha" depends="git.revision">
		<condition property="tmp.repository.sha" value="${repository.version}" else="noSHA">
			<isset property="repository.version" />
		</condition>
	</target>

	<!-- checks for dirty work tree (stores in ${repository.modified}) -->
	<target name="git.status" if="git.present">
		<exec executable="git" outputproperty="git.status" failifexecutionfails="false" errorproperty="">
			<arg value="status" />
			<arg value="--porcelain" />
		</exec>
		<condition property="repository.modified">
			<and>
				<isset property="git.status" />
				<length string="${git.status}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>

	<!-- reports no git warning -->
	<target name="no_git_warning" unless="git.present">
		<echo level="warning">[WARNING] Unable to interact with git!</echo>
	</target>

	<!-- reports Dirty worktree warning -->
	<target name="dirty_tree_warning" if="repository.modified">
		<echo level="warning">[WARNING] Working directory modified! Reposity might be out of sync!</echo>
	</target>

	<!-- modified version of: http://stackoverflow.com/a/4059546 -->
	<target name="git.revision" if="git.present">
		<!-- Store git revision in ${repository.version} -->
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="rev-parse" />
			<arg value="HEAD" />
		</exec>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>

	<!-- modified version of EE3 build.xml (https://github.com/pahimar/Equivalent-Exchange-3) -->
	<target name="clean">
		<delete file="${environment.mcp_location}/src/minecraft/mcmod.info" />
		<delete file="${environment.mcp_location}/src/minecraft/pack.mcmeta" />
		<delete dir="${environment.mcp_location}/src/minecraft/${environment.main_package_path}" />
		<delete dir="${environment.mcp_location}/reobf/minecraft" />
	</target>

	<!-- Copies the mod source into the MCP build directory -->
	<target name="prep">
		<copy todir="${environment.mcp_location}/src/minecraft">
			<fileset dir="${environment.source_location}" />
		</copy>
	</target>

	<target name="replace_tokens">
		<replace dir="${environment.mcp_location}/src/minecraft/${environment.main_package_path}" token="@GIT_SHA@" value="${repository.shaString}" summary="yes" />
		<replace dir="${environment.mcp_location}/src/minecraft/${environment.main_package_path}" token="@VERSION@" value="${build.mod_version}" summary="yes" />
		<replace file="${environment.mcp_location}/src/minecraft/mcmod.info" token="@VERSION@" value="${build.mod_version}" summary="yes" />
	</target>

	<target name="recompile">
		<exec dir="${environment.mcp_location}" executable="cmd" osfamily="windows">
			<arg line="/c recompile.bat" />
		</exec>
		<exec dir="${environment.mcp_location}" executable="bash" osfamily="unix">
			<arg line="recompile.sh" />
		</exec>
	</target>

	<target name="reobfuscate">
		<exec dir="${environment.mcp_location}" executable="cmd" osfamily="windows">
			<arg line="/c reobfuscate_srg.bat" />
		</exec>
		<exec dir="${environment.mcp_location}" executable="bash" osfamily="unix">
			<arg line="reobfuscate_srg.sh" />
		</exec>
	</target>

	<target name="build" depends="clean, get_sha_string, prep, replace_tokens, recompile, reobfuscate">

		<!-- Build the jar -->
		<mkdir dir="${environment.release_location}/MC ${build.minecraft_version}/${build.mod_version}" />
		<jar destfile="${environment.release_location}/MC ${build.minecraft_version}/${build.mod_version}/watercraft-universal-${build.mod_version}-${repository.shaString}.jar">
			<fileset dir="${environment.mcp_location}/src/minecraft/" includes="mcmod.info" />
			<fileset dir="${environment.mcp_location}/src/minecraft/" includes="pack.mcmeta" />
			<fileset dir="${environment.mcp_location}/reobf/minecraft" />
			<fileset dir="${environment.resource_location}" excludes="**/xcf/**" />
		</jar>

		<!-- Clean up the MCP source now that we are done -->
		<antcall target="clean" />
	</target>
</project>